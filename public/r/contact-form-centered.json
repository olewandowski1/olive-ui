{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "contact-form-centered",
  "type": "registry:block",
  "title": "Contact Form Centered",
  "description": "A centered contact form block with a badge, title, description, and a contact form. It includes a name field, email field, message field, and a submit button. The form has also a modal that appears on Privacy Policy link click. You should handle the form submission logic, as well as the data validation.",
  "registryDependencies": [
    "button",
    "checkbox",
    "input",
    "label",
    "textarea",
    "dialog"
  ],
  "files": [
    {
      "path": "registry/default/blocks/contact-form-centered/page.tsx",
      "content": "import ContactFormCentered from '@/registry/default/blocks/contact-form-centered/components/contact-form-centered';\r\n\r\nexport default function Page() {\r\n  return <ContactFormCentered />;\r\n}\r\n",
      "type": "registry:page",
      "target": "app/blocks/page.tsx"
    },
    {
      "path": "registry/default/blocks/contact-form-centered/components/contact-form-centered.tsx",
      "content": "import { ContactForm } from './contact-form';\r\nimport { MaxWidthWrapper } from './max-width-wrapper';\r\n\r\ntype ContactFormCenteredProps = {\r\n  badgeText?: string;\r\n  headingText?: string;\r\n  sectionDescription?: string;\r\n};\r\n\r\nexport default function ContactFormCentered({\r\n  badgeText = 'Any questions?',\r\n  headingText = 'Feel free to contact us',\r\n  sectionDescription = 'We are here to help you with any questions or concerns you may have. Reach out to us today!',\r\n}: ContactFormCenteredProps) {\r\n  return (\r\n    <section aria-labelledby='contact-form-heading'>\r\n      <MaxWidthWrapper>\r\n        <div className='flex flex-col items-center gap-8 text-center'>\r\n          <span className='text-sm font-medium text-primary'>{badgeText}</span>\r\n\r\n          <h2\r\n            id='contact-form-heading'\r\n            className='max-w-screen-md text-3xl font-bold tracking-tight text-foreground sm:text-4xl md:text-5xl'\r\n          >\r\n            {headingText}\r\n          </h2>\r\n\r\n          <p className='max-w-screen-md text-base leading-relaxed text-foreground/80'>\r\n            {sectionDescription}\r\n          </p>\r\n\r\n          <div className='w-full text-start'>\r\n            <ContactForm />\r\n          </div>\r\n        </div>\r\n      </MaxWidthWrapper>\r\n    </section>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/blocks/contact-form-centered/components/contact-form.tsx",
      "content": "'use client';\r\n\r\nimport { CircleAlert, CircleCheck, Loader2 } from 'lucide-react';\r\nimport { useActionState } from 'react';\r\n\r\nimport { cn } from '@/registry/default/lib/utils';\r\nimport { Button } from '@/registry/default/ui/button';\r\nimport { Checkbox } from '@/registry/default/ui/checkbox';\r\nimport { Input } from '@/registry/default/ui/input';\r\nimport { Label } from '@/registry/default/ui/label';\r\nimport { Textarea } from '@/registry/default/ui/textarea';\r\n\r\nimport { PolicyModal } from './policy-modal';\r\n\r\nexport function ContactForm() {\r\n  const [state, action, isPending] = useActionState(\r\n    async () => {\r\n      // Simulate a server action\r\n      await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n      // Simulate a success or failure response\r\n      // In a real application, you would handle form submission here\r\n      if (Math.random() < 0.5) {\r\n        return {\r\n          success: false,\r\n          message: 'An error occurred. Please try again.',\r\n        };\r\n      }\r\n\r\n      // Simulate successful form submission\r\n      // You would typically send the form data to a server here\r\n      return { success: true, message: 'Form submitted successfully!' };\r\n    },\r\n    // Initial state for the action\r\n    { success: false, message: '' }\r\n  );\r\n\r\n  return (\r\n    <form\r\n      action={action}\r\n      className='w-full max-w-lg mx-auto space-y-6'\r\n      autoComplete='on'\r\n      noValidate\r\n    >\r\n      {state.message && (\r\n        <div\r\n          role='alert'\r\n          aria-live='assertive'\r\n          className={cn('w-full rounded-lg border p-4 shadow-sm', {\r\n            'border-emerald-500 bg-emerald-500/5': state.success,\r\n            'border-destructive bg-destructive/5': !state.success,\r\n          })}\r\n        >\r\n          <div className='flex items-start gap-2'>\r\n            {state.success ? (\r\n              <CircleCheck\r\n                size={20}\r\n                strokeWidth={2}\r\n                className='text-emerald-500'\r\n                aria-hidden='true'\r\n              />\r\n            ) : (\r\n              <CircleAlert\r\n                size={20}\r\n                strokeWidth={2}\r\n                className='text-destructive'\r\n                aria-hidden='true'\r\n              />\r\n            )}\r\n            <p\r\n              className={cn('text-sm', {\r\n                'text-emerald-500': state.success,\r\n                'text-destructive': !state.success,\r\n              })}\r\n            >\r\n              {state.message}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div className='space-y-4'>\r\n        <div className='space-y-1'>\r\n          <Label htmlFor='name'>Name</Label>\r\n          <Input\r\n            id='name'\r\n            name='name'\r\n            type='text'\r\n            placeholder='Enter your name'\r\n            required\r\n            disabled={isPending || state.success}\r\n          />\r\n        </div>\r\n\r\n        <div className='space-y-1'>\r\n          <Label htmlFor='email'>Email</Label>\r\n          <Input\r\n            id='email'\r\n            name='email'\r\n            type='email'\r\n            placeholder='Enter your email'\r\n            required\r\n            disabled={isPending || state.success}\r\n          />\r\n        </div>\r\n\r\n        <div className='space-y-1'>\r\n          <Label htmlFor='message'>Message</Label>\r\n          <Textarea\r\n            id='message'\r\n            name='message'\r\n            placeholder='Enter your message'\r\n            className='min-h-[120px] resize-none'\r\n            required\r\n            disabled={isPending || state.success}\r\n          />\r\n        </div>\r\n\r\n        <div className='flex items-center gap-2'>\r\n          <Checkbox\r\n            id='acceptPolicy'\r\n            name='acceptPolicy'\r\n            required\r\n            disabled={isPending || state.success}\r\n          />\r\n          <Label\r\n            htmlFor='acceptPolicy'\r\n            className='flex items-center gap-0 text-sm font-normal text-foreground/80'\r\n          >\r\n            By sending a message, you agree to our\r\n            <PolicyModal>\r\n              <span className='ml-1 underline hover:text-foreground'>\r\n                Privacy Policy\r\n              </span>\r\n            </PolicyModal>\r\n            .\r\n          </Label>\r\n        </div>\r\n\r\n        <Button\r\n          type='submit'\r\n          className='w-full'\r\n          disabled={isPending || state.success}\r\n        >\r\n          {isPending ? (\r\n            <>\r\n              <Loader2\r\n                size={16}\r\n                strokeWidth={2}\r\n                className='mr-2 animate-spin'\r\n                aria-hidden='true'\r\n              />\r\n              <span>Submittingâ€¦</span>\r\n            </>\r\n          ) : (\r\n            'Submit'\r\n          )}\r\n        </Button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/blocks/contact-form-centered/components/max-width-wrapper.tsx",
      "content": "import { cn } from '@/registry/default/lib/utils';\r\n\r\ntype MaxWidthWrapperProps = {\r\n  className?: string;\r\n  children: React.ReactNode;\r\n};\r\n\r\nexport function MaxWidthWrapper({ className, children }: MaxWidthWrapperProps) {\r\n  return (\r\n    <div\r\n      className={cn('h-full mx-auto w-full max-w-screen-xl px-2', className)}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    },
    {
      "path": "registry/default/blocks/contact-form-centered/components/policy-modal.tsx",
      "content": "'use client';\r\n\r\nimport { useRef, useState } from 'react';\r\n\r\nimport { Button } from '@/registry/default/ui/button';\r\nimport {\r\n  Dialog,\r\n  DialogClose,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogFooter,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogTrigger,\r\n} from '@/registry/default/ui/dialog';\r\n\r\ntype PolicyModalProps = {\r\n  children: React.ReactNode;\r\n};\r\n\r\nexport function PolicyModal({ children }: PolicyModalProps) {\r\n  const [hasReadToBottom, setHasReadToBottom] = useState(false);\r\n  const contentRef = useRef<HTMLDivElement>(null);\r\n\r\n  const handleScroll = () => {\r\n    const content = contentRef.current;\r\n    if (!content) return;\r\n\r\n    const scrollPercentage =\r\n      content.scrollTop / (content.scrollHeight - content.clientHeight);\r\n    if (scrollPercentage >= 0.99 && !hasReadToBottom) {\r\n      setHasReadToBottom(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog>\r\n      <DialogTrigger asChild>{children}</DialogTrigger>\r\n      <DialogContent className='flex flex-col gap-0 p-0 max-h-[min(640px,80vh)] sm:max-w-lg [&>button:last-child]:top-3.5'>\r\n        <DialogHeader className='space-y-0 text-left contents'>\r\n          <DialogTitle className='px-6 py-4 text-base border-b border-border'>\r\n            Privacy Policy\r\n          </DialogTitle>\r\n          <div\r\n            ref={contentRef}\r\n            onScroll={handleScroll}\r\n            className='overflow-y-auto'\r\n          >\r\n            <DialogDescription asChild>\r\n              <div className='px-6 py-4'>\r\n                <div className='space-y-4 [&_strong]:font-semibold [&_strong]:text-foreground'>\r\n                  <div className='space-y-4'>\r\n                    <div className='space-y-1'>\r\n                      <p>\r\n                        <strong>Acceptance of Terms</strong>\r\n                      </p>\r\n                      <p>\r\n                        By accessing and using this website, users agree to\r\n                        comply with and be bound by these Terms of Service.\r\n                        Users who do not agree with these terms should\r\n                        discontinue use of the website immediately.\r\n                      </p>\r\n                    </div>\r\n\r\n                    <div className='space-y-1'>\r\n                      <p>\r\n                        <strong>User Account Responsibilities</strong>\r\n                      </p>\r\n                      <p>\r\n                        Users are responsible for maintaining the\r\n                        confidentiality of their account credentials. Any\r\n                        activities occurring under a user&lsquo;s account are\r\n                        the sole responsibility of the account holder. Users\r\n                        must notify the website administrators immediately of\r\n                        any unauthorized account access.\r\n                      </p>\r\n                    </div>\r\n\r\n                    <div className='space-y-1'>\r\n                      <p>\r\n                        <strong>Content Usage and Restrictions</strong>\r\n                      </p>\r\n                      <p>\r\n                        The website and its original content are protected by\r\n                        intellectual property laws. Users may not reproduce,\r\n                        distribute, modify, create derivative works, or\r\n                        commercially exploit any content without explicit\r\n                        written permission from the website owners.\r\n                      </p>\r\n                    </div>\r\n\r\n                    <div className='space-y-1'>\r\n                      <p>\r\n                        <strong>Limitation of Liability</strong>\r\n                      </p>\r\n                      <p>\r\n                        The website provides content &ldquo;as is&ldquo; without\r\n                        any warranties. The website owners shall not be liable\r\n                        for direct, indirect, incidental, consequential, or\r\n                        punitive damages arising from user interactions with the\r\n                        platform.\r\n                      </p>\r\n                    </div>\r\n\r\n                    <div className='space-y-1'>\r\n                      <p>\r\n                        <strong>User Conduct Guidelines</strong>\r\n                      </p>\r\n                      <ul className='pl-6 list-disc'>\r\n                        <li>Not upload harmful or malicious content</li>\r\n                        <li>Respect the rights of other users</li>\r\n                        <li>\r\n                          Avoid activities that could disrupt website\r\n                          functionality\r\n                        </li>\r\n                        <li>\r\n                          Comply with applicable local and international laws\r\n                        </li>\r\n                      </ul>\r\n                    </div>\r\n\r\n                    <div className='space-y-1'>\r\n                      <p>\r\n                        <strong>Modifications to Terms</strong>\r\n                      </p>\r\n                      <p>\r\n                        The website reserves the right to modify these terms at\r\n                        any time. Continued use of the website after changes\r\n                        constitutes acceptance of the new terms.\r\n                      </p>\r\n                    </div>\r\n\r\n                    <div className='space-y-1'>\r\n                      <p>\r\n                        <strong>Termination Clause</strong>\r\n                      </p>\r\n                      <p>\r\n                        The website may terminate or suspend user access without\r\n                        prior notice for violations of these terms or for any\r\n                        other reason deemed appropriate by the administration.\r\n                      </p>\r\n                    </div>\r\n\r\n                    <div className='space-y-1'>\r\n                      <p>\r\n                        <strong>Governing Law</strong>\r\n                      </p>\r\n                      <p>\r\n                        These terms are governed by the laws of the jurisdiction\r\n                        where the website is primarily operated, without regard\r\n                        to conflict of law principles.\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </DialogDescription>\r\n          </div>\r\n        </DialogHeader>\r\n\r\n        <DialogFooter className='gap-2 px-6 py-4 border-t border-border'>\r\n          <DialogClose asChild>\r\n            <Button\r\n              type='button'\r\n              className='w-full'\r\n              disabled={!hasReadToBottom}\r\n            >\r\n              {hasReadToBottom ? 'Close' : 'Scroll To Read'}\r\n            </Button>\r\n          </DialogClose>\r\n        </DialogFooter>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n",
      "type": "registry:component"
    }
  ],
  "categories": [
    "landing",
    "contact"
  ]
}